#!/bin/bash

set -u

jobs=4
mem_size=$(free -m | sed '2!d' | sed 's/  */ /g' | cut -d' ' -f2)
[ "$mem_size" -lt 2000 ] && jobs=3
echo "jobs: $jobs"

rebuild=
print_help=
install=
build_mode=release
need_packages=

#build_deb_package=
#build_deb_package_support=true

# Directory of this script
script_dir=$(dirname $(readlink -f $0))
echo "script_dir: $script_dir"

display_help()
{
cat << EOF
Usage: ${0##*/} [hrdbsD]
  -h  display this help and exit
  -i  install
  -r  full rebuild of project
  -d  build in 'debug' mode 
  -D  build deb package
EOF
}

check_need_package()
{
    local res=$(dpkg -l | grep -P "^ii\s+${1}")
    [ -z "$res" ] && echo "Error: Need to install '$1' package" && need_packages=TRUE
}

# Processing of positional parameters:
#    http://wiki.bash-hackers.org/scripting/posparams
while test -n ${1:-""}
do
    case "$1" in
        -h)
            print_help=yes
            shift
            ;;
       -i)
            install=yes
            shift
            ;;
        -r)
            rebuild=yes
            shift
            ;;
        -d)
            build_mode=debug
            shift
            ;;
#         -D)
#             build_deb_package=yes
#             build_deb_package_support=true
#             shift
#             ;;
        -*)
            echo "Error: Unknown option: $1" >&2
            exit 1
            ;;
        *)  # No more options
            break
            ;;
    esac
done

if [ "$print_help" = "yes" ]; then
    display_help
    exit 0
fi

# if [ "$build_deb_package" = "yes" ]; then
#     # Required packages
#     need_packages=
#     check_need_package 'md5deep'
#     check_need_package 'debconf'
#     check_need_package 'debhelper'
#     check_need_package 'lintian'
#     [ "$need_packages" = "TRUE" ] && exit 1;
# fi

git_branch=$(git status -b -s | head -n1 | sed 's/\./ /' | cut -d' ' -f2)
build_subdir=${build_mode}-${git_branch}
build_dir=./build/$build_subdir

[ "$rebuild" = "yes"  ] && rm -rf ./build/$build_subdir

QBS=$(which qbs)

set -e
$QBS build \
    --file qtox_project.qbs \
    --build-directory ./build \
    --command-echo-mode command-line \
    --jobs $jobs \
    --no-install \
    qbs.buildVariant:$build_mode \
    profile:qtox $build_subdir

if [ "$install" = "yes" ]; then
    stc_dir=$(pwd)
    cd /usr/local/bin
    if [ -f qtox ]; then
        echo "Archiving the qtox ..."
        sudo tar -cjf qtox_$(date +%Y.%m.%d_%H.%M.%S).tar.bz2 qtox
        sudo rm -rf qtox
    fi
    cd $stc_dir
    
    sudo $QBS install \
        --file qtox_project.qbs \
        --build-directory ./build \
        --no-build \
        --install-root /usr/local \
        qbs.buildVariant:$build_mode \
        profile:qtox $build_subdir

    if [ "$build_mode" = "release" ]; then
        echo "Removing debug info ... "
        sudo strip --strip-debug --strip-unneeded /usr/local/bin/qtox
    fi
    echo "Installation successfully completed"
fi

